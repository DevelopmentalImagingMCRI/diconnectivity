#!/usr/bin/env python

import numpy
import nibabel
import os
import sys

import getopt

import NIFTIOrientationTools

def usage():
	print sys.argv[0] + " [--use-ref-geom] <input nii> <reference nii> <output nii>"
	print
	print "Swaps the axes of the input nii to match reference nii, writes to output nii"
	print "--use-ref-geom copies the geometry of the reference to the output"


opts, args = getopt.getopt(sys.argv[1:], "h", ['use-ref-geom'])

if len(args) < 3:
	usage()
	quit()

inputNIIFile = args[0]
refNIIFile = args[1]
outputNIIFile = args[2]

useRefGeom = False

for o, a in opts:
		if o == '-h':
			usage()
			quit()
		if o == '--use-ref-geom':
			useRefGeom = True

if not os.path.isfile(inputNIIFile):
	print "Input file not found"
	quit()

if not os.path.isfile(refNIIFile):
	print "Reference file not found"
	quit()

inputNII = nibabel.load(inputNIIFile)
refNII = nibabel.load(refNIIFile)

inputAXCodes = nibabel.aff2axcodes(inputNII.get_affine())
inputOrnt = nibabel.orientations.axcodes2ornt(inputAXCodes)

refAXCodes = nibabel.aff2axcodes(refNII.get_affine())
refOrnt = nibabel.orientations.axcodes2ornt(refAXCodes)

inputToRefTransformOrnt = nibabel.orientations.ornt_transform(inputOrnt, refOrnt)

outputIMG = nibabel.orientations.apply_orientation(inputNII.get_data(), inputToRefTransformOrnt)

if useRefGeom:
	outputAffine = refNII.get_affine()
else:
	outputAffine = NIFTIOrientationTools.applyOrntToNIIAffine(inputNII, inputToRefTransformOrnt)

# set voxel dimensions using the outputAffine
outputPixdims = numpy.sqrt(numpy.sum(numpy.multiply(outputAffine[0:3, 0:3], outputAffine[0:3, 0:3]), axis = 1))

#print outputAffine
outputNII = nibabel.Nifti1Image(outputIMG, outputAffine)
nibabel.save(outputNII, outputNIIFile)

